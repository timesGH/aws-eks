name: Deploy Node.js App to EKS

on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Name of the EKS cluster'
        required: true
        default: 'my_eks_cluster'
      awsRegion:
        description: 'AWS Region for the cluster'
        required: true
        default: 'us-east-1'
      action:
        description: 'Action to perform (deploy/remove)'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - remove
      appName:
        description: 'Name of the application to deploy'
        required: true
      repoName:
        description: 'Name of the repository containing the application'
        required: true
      containerPort:
        description: 'Container port for the application'
        required: true
        default: '3000'

jobs:
  terraform:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'deploy' }}
    defaults:
      run:
        working-directory: Terraform
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Terraform Init
      run: terraform init -upgrade
    
    - name: Create Terraform variables file
      run: |
        cat > terraform.auto.tfvars <<EOF
        region = "${{ github.event.inputs.awsRegion }}"
        cluster_name = "${{ github.event.inputs.clusterName }}"
        EOF
    
    - name: Terraform Plan
      run: terraform plan
    
    - name: Terraform Apply
      run: terraform apply -auto-approve
    
    # For the post-Terraform steps we still need AWS credentials to interact with EKS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion }}
        
    - name: Wait for Cluster to be Ready
      run: |
        echo "Waiting for EKS cluster to be ready..."
        aws eks wait cluster-active --name ${{ github.event.inputs.clusterName }} --region ${{ github.event.inputs.awsRegion }}
        
    - name: Update kubeconfig
      run: |
        aws eks --region ${{ github.event.inputs.awsRegion }} update-kubeconfig \
          --name ${{ github.event.inputs.clusterName }}
    
    - name: Run post-deploy script
      run: bash post-deploy.sh

  build_and_deploy:
    needs: terraform
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'deploy' }}
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion }}
    
    # ... rest of the build_and_deploy job ...

  terraform_destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'remove' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion }}
        
    - name: Install jq (required for cleanup script)
      run: sudo apt-get update && sudo apt-get install -y jq
    
    - name: Run cleanup script
      run: |
        chmod +x cleanup.sh
        ./cleanup.sh ${{ github.event.inputs.awsRegion }} ${{ github.event.inputs.clusterName }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Terraform Init
      working-directory: Terraform
      run: terraform init -upgrade
    
    - name: Create Terraform variables file
      working-directory: Terraform
      run: |
        cat > terraform.auto.tfvars <<EOF
        region = "${{ github.event.inputs.awsRegion }}"
        cluster_name = "${{ github.event.inputs.clusterName }}"
        EOF
    
    - name: Terraform Destroy
      working-directory: Terraform
      run: terraform destroy -auto-approve || true
    
    - name: Final Resource Cleanup Check
      run: |
        echo "Performing final verification of resource cleanup..."
        ./cleanup.sh ${{ github.event.inputs.awsRegion }} ${{ github.event.inputs.clusterName }}
        echo "Cleanup complete"
