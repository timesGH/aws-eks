name: Manage EKS Cluster with Terraform Cloud

on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Name of the EKS cluster'
        required: true
        default: 'my_eks_cluster'
      awsRegion:
        description: 'AWS Region for the cluster'
        required: true
        default: 'us-east-1'
      action:
        description: 'Action to perform (apply/destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    name: 'Terraform Cloud Workflow'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Terraform Init
      id: init
      run: |
        terraform init

    - name: Terraform Validate
      id: validate
      run: |
        terraform validate

    - name: Update Terraform Variables
      run: |
        # Create a terraform.tfvars file with the input variables
        cat > terraform.tfvars << EOF
        region = "${{ github.event.inputs.awsRegion }}"
        cluster_name = "${{ github.event.inputs.clusterName }}"
        EOF

    - name: Terraform Plan
      id: plan
      if: github.event.inputs.action == 'apply'
      run: |
        terraform plan -var-file="terraform.tfvars" -input=false -out=tfplan
      continue-on-error: true

    - name: Terraform Apply
      id: apply
      if: github.event.inputs.action == 'apply'
      run: |
        terraform apply -auto-approve tfplan
      
    - name: Terraform Destroy
      id: destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform destroy -var-file="terraform.tfvars" -auto-approve

    - name: Post-deployment configuration
      if: github.event.inputs.action == 'apply'
      run: |
        chmod +x ./post-deploy.sh
        ./post-deploy.sh

    - name: Output Cluster Info
      if: github.event.inputs.action == 'apply'
      run: |
        echo "Cluster Endpoint: $(terraform output -raw cluster_endpoint)"
        echo "Cluster Name: $(terraform output -raw cluster_name)"
