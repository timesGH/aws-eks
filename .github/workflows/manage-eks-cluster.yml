name: EKS Cluster and Node.js App Deployment

on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Name of the EKS cluster'
        required: true
        default: 'my_eks_cluster'
      awsRegion:
        description: 'AWS Region for the cluster'
        required: true
        default: 'us-east-1'
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - update-app-only
          - destroy
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'kubernetes/**'
      - 'Dockerfile'
      - 'package.json'

jobs:
  terraform_provision:
    name: 'Provision EKS with Terraform Cloud'
    runs-on: ubuntu-latest
    # Skip infrastructure provisioning if we're only updating the app
    if: ${{ github.event.inputs.action != 'update-app-only' && (github.event_name != 'push' || github.event.inputs.action == 'deploy') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Terraform Init
      id: init
      run: |
        terraform init

    - name: Terraform Validate
      id: validate
      run: |
        terraform validate

    - name: Update Terraform Variables
      run: |
        # Create a terraform.tfvars file with the input variables
        cat > terraform.tfvars << EOF
        region = "${{ github.event.inputs.awsRegion || 'us-east-1' }}"
        cluster_name = "${{ github.event.inputs.clusterName || 'my_eks_cluster' }}"
        EOF

    - name: Terraform Plan
      id: plan
      if: github.event.inputs.action == 'deploy'
      run: |
        terraform plan -var-file="terraform.tfvars" -input=false -out=tfplan
      continue-on-error: true

    - name: Terraform Apply
      id: apply
      if: github.event.inputs.action == 'deploy'
      run: |
        terraform apply -auto-approve tfplan
      
    - name: Terraform Destroy
      id: destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform destroy -var-file="terraform.tfvars" -auto-approve

    - name: Post-deployment configuration
      if: github.event.inputs.action == 'deploy'
      run: |
        chmod +x ./post-deploy.sh
        ./post-deploy.sh

    - name: Output Cluster Info
      if: github.event.inputs.action == 'deploy'
      run: |
        echo "Cluster Endpoint: $(terraform output -raw cluster_endpoint)"
        echo "Cluster Name: $(terraform output -raw cluster_name)"
        # Export these as environment variables for the next job
        echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
        echo "CLUSTER_REGION=$(terraform output -raw region)" >> $GITHUB_ENV

  deploy_nodejs:
    name: 'Deploy Node.js App'
    runs-on: ubuntu-latest
    needs: [terraform_provision]
    if: |
      always() && 
      (github.event.inputs.action == 'deploy' || 
       github.event.inputs.action == 'update-app-only' || 
       github.event_name == 'push') && 
      (needs.terraform_provision.result == 'success' || 
       needs.terraform_provision.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion || env.CLUSTER_REGION || 'us-east-1' }}
    
    - name: Setup Terraform for cluster info
      if: github.event.inputs.action == 'update-app-only' || github.event_name == 'push'
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Get cluster info if updating app only
      if: github.event.inputs.action == 'update-app-only' || github.event_name == 'push'
      run: |
        # Initialize terraform to read state
        terraform init
        echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
        echo "CLUSTER_REGION=$(terraform output -raw region)" >> $GITHUB_ENV
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Create ECR Repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ github.event.repository.name }} || \
        aws ecr create-repository --repository-name ${{ github.event.repository.name }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Generate image tag
      id: image-tag
      run: |
        TAG=$(echo $GITHUB_SHA | cut -c1-7)
        echo "tag=$TAG" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.image-tag.outputs.tag }}, ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:latest
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.CLUSTER_REGION || github.event.inputs.awsRegion }} --name ${{ env.CLUSTER_NAME || github.event.inputs.clusterName }}
    
    - name: Update Kubernetes manifests
      run: |
        # Replace placeholders in Kubernetes manifests
        ECR_REPOSITORY_URI="${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}"
        IMAGE_TAG="${{ steps.image-tag.outputs.tag }}"
        APP_NAME=$(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9-]/-/g')
        
        # Process Kubernetes YAML files
        mkdir -p kubernetes/processed
        for file in kubernetes/*.yaml; do
          sed -e "s|\${ECR_REPOSITORY_URI}|$ECR_REPOSITORY_URI|g" \
              -e "s|latest|$IMAGE_TAG|g" \
              -e "s|nodejs-app|$APP_NAME|g" \
              "$file" > "kubernetes/processed/$(basename "$file")"
        done
    
    - name: Deploy to Kubernetes
      run: |
        APP_NAME=$(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9-]/-/g')
        kubectl apply -f kubernetes/processed/
    
    - name: Verify deployment
      run: |
        APP_NAME=$(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9-]/-/g')
        kubectl rollout status deployment/$APP_NAME --timeout=180s
    
    - name: Get Service URL
      run: |
        APP_NAME=$(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9-]/-/g')
        echo "====== Application Deployment Complete ======"
        echo "Service URL:"
        kubectl get service $APP_NAME-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
        echo ""
        echo "It may take a few minutes for the Load Balancer to be fully provisioned and the URL to become available."
        echo "=============================================="
