name: Manual EKS Deploy/Destroy

# ONLY manual trigger, no code change triggers
on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Name of the EKS cluster'
        required: true
        default: 'my_eks_cluster'
      awsRegion:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - remove

jobs:
  deploy-job:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'deploy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.awsRegion }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Create Terraform variables
        working-directory: Terraform
        run: |
          cat > terraform.auto.tfvars << EOF
          region = "${{ github.event.inputs.awsRegion }}"
          cluster_name = "${{ github.event.inputs.clusterName }}"
          EOF
      
      - name: Terraform Init
        working-directory: Terraform
        run: terraform init -upgrade
      
      - name: Terraform Apply
        working-directory: Terraform
        run: terraform apply -auto-approve
      
      - name: Update kubeconfig
        run: |
          aws eks --region ${{ github.event.inputs.awsRegion }} update-kubeconfig \
            --name ${{ github.event.inputs.clusterName }}
      
      - name: Wait for cluster to be ready
        run: sleep 60
      
      - name: Simple post-deploy
        run: |
          echo "Kubeconfig updated successfully!"
          echo "EKS cluster ${{ github.event.inputs.clusterName }} has been created!"
          echo "To connect to your cluster, run:"
          echo "aws eks --region ${{ github.event.inputs.awsRegion }} update-kubeconfig --name ${{ github.event.inputs.clusterName }}"

  destroy-job:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'remove'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.awsRegion }}
      
      - name: Try to connect to cluster and update status
        run: |
          # Try to connect to the cluster
          echo "Checking if cluster exists..."
          if aws eks describe-cluster --name ${{ github.event.inputs.clusterName }} --region ${{ github.event.inputs.awsRegion }} &> /dev/null; then
            echo "Cluster exists, will proceed with destruction"
          else
            echo "Cluster doesn't exist, but will continue with Terraform destroy"
          fi
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Create Terraform variables
        working-directory: Terraform
        run: |
          cat > terraform.auto.tfvars << EOF
          region = "${{ github.event.inputs.awsRegion }}"
          cluster_name = "${{ github.event.inputs.clusterName }}"
          EOF
      
      - name: Terraform Init
        working-directory: Terraform
        run: terraform init -upgrade
      
      - name: Terraform Destroy
        working-directory: Terraform
        run: terraform destroy -auto-approve || true
      
      - name: Cleanup verification
        run: |
          echo "Verifying deletion of EKS cluster..."
          if aws eks describe-cluster --name ${{ github.event.inputs.clusterName }} --region ${{ github.event.inputs.awsRegion }} &> /dev/null; then
            echo "Warning: Cluster still exists. It may still be in the process of being deleted."
            echo "Check the AWS Management Console for status."
          else
            echo "Cluster ${{ github.event.inputs.clusterName }} has been successfully deleted!"
          fi
